buildscript {
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.1.0"
    }
}

plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'jacoco'
}

apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply from: "${rootDir}/script/publish-maven.gradle"
apply from: 'publish.gradle'

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.maven.plugins:maven-resources-plugin:3.3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.mockito:mockito-core:4.7.0'
}

group = 'io.github.ones1kk'
version = '1.0.0'
description = 'Assertion for java programming'
java.sourceCompatibility = JavaVersion.VERSION_11

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        html.destination file("$buildDir/jacoco/report/index.html")
        xml.destination file("$buildDir/jacoco/report/index.xml")
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
            }
        }
    }

    afterEvaluate {

        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["io.github.ones1kk.assertion.core/message/**",
                              "io.github.ones1kk.assertion.core/constant/**"
                    ])
        }))
    }
}

tasks.register('testCoverage', Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}